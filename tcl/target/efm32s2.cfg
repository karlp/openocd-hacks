#
# Silicon Labs (formerly Energy Micro) EFM32 target
#
# Note: All EFM32 chips have SWD support, but only newer series 1
# chips have JTAG support.
#

source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME efm32s2
}

# Work-area is a space in RAM used for flash programming
# By default use 2kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x800
}

if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
      set _CPUTAPID 0x4ba00477
   } {
      set _CPUTAPID 0x2ba01477
   }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

adapter speed 1000

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -dap $_CHIPNAME.dap

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME efm32s2 0 0 0 0 $_TARGETNAME

if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq

   $_TARGETNAME configure -event examine-fail efm32s2_dci_read_se_status
}

proc efm32s2_dci_connect {} {
    echo "KARL - running dci_connect"
	set target [target current]
	set dap [$target cget -dap]

   # Read DP_IDCODE
   set dp_id [$dap dpreg 0]

   if {$dp_id != 0x6BA02477} {
      echo "Error: invalid dp id for series2 efm32"
      return
   }

   poll off

   # Clear error and sticky flag conditions
   # DP_ABORT = ORUNERRCLR | WDERRCLR STKERRCLR | STKCMPCLR
   $dap dpreg 0 0x1E

   # DP_CTRL = CSYSPWRUPREQ | CDBGPWRUPREQ

   $dap dpreg 0x04 0x50000000

   # DP_SELECT for DCP AP register bank 0
   $dap dpreg 0x08 0x01000000

   # Set CSW
   $dap apreg 1 0x00 0x22000002

   # Write AP_TAR = DCIID
   $dap apreg 1 0x04 0x10FC

   # Read DP DRW
   $dap dpreg 0x0C

   # Read AP RDBUFF
   set DCIID [$dap apreg 1 0x0C]
   if {$DCIID != 0xdc11d} {
      echo "KKKKK Failed to read correct DCIID"
   } else {
      echo "KKKKK Successfully connected to DCI"
   }
}

proc efm32s2_dci_read_status {} {
    echo "KKKK DCI_READ_STATUS"
   set target [target current]
	set dap [$target cget -dap]

   # AP_TAR = DCISTATUS
   $dap apreg 1 0x04 0x1008

   set dcistatus [$dap apreg 1 0x0C]
   set dcistatus [$dap dpreg 0x0C]

   return $dcistatus
}

proc efm32s2_dci_write_cmd { dci_write_word } {
    echo "kkkkkkkk DCI_WRITE_CMD"
   set target [target current]
	set dap [$target cget -dap]

   for {set i 0} {1} {incr i} {
      if {$i >= 100} {
         echo "$target DCI write timeout, unable to write command"
         return
      }

      set dcistatus [efm32s2_dci_read_status]
      if {$dcistatus & 1} {
         echo "DCI WPENDING bit set, retrying"
         sleep 10
         continue
      }

      if {$dcistatus & 0x100} {
         echo "DCI RDATAVALID is set, can't write to DCIWRITE"
         return
      }

      # AP_TAR = DCIWDATA
      $dap apreg 1 0x04 0x1000

      # Write word
      $dap apreg 1 0x0C $dci_write_word
      return
   }
}

proc efm32s2_dci_read_response {} {
   set target [target current]
	set dap [$target cget -dap]

   for {set i 0} {1} {incr i} {
      if {$i >= 100} {
         echo "$target DCI read timeout"
         return
      }

      set dcistatus [efm32s2_dci_read_status]

      if {$dcistatus & 0x100} {
         # AP_TAR = DCIRDATA
         $dap apreg 1 0x04 0x1004

         set dciread [$dap apreg 1 0x0C]
         set dciread [$dap dpreg 0x0C]
         return $dciread
      } else {
         echo "DCI RDATAVALID is not set, retrying"
         sleep 10
         continue
      }
   }
}

proc efm32s2_dci_device_erase {} {
   efm32s2_dci_connect
   efm32s2_dci_write_cmd 8
   efm32s2_dci_write_cmd 0x430F0000

   sleep 2000
   echo "Device erase command sent. Device should now be erased and debug should be available again after a reset"
}

proc efm32s2_dci_device_lock {} {
   echo "Attempting to activate debug lock..."
   efm32s2_dci_connect
   efm32s2_dci_write_cmd 8
   efm32s2_dci_write_cmd 0x430C0000

   set recvlen [efm32s2_dci_read_response]

   if {$recvlen & 0xFFFF0000} {
      echo "command response was not OK, got $recvlen as command response. Can't continue."
      return
   }

   sleep 100

   efm32s2_dci_read_se_status
}

proc efm32s2_dci_read_se_status {} {
    echo "OH SHIT BOI dci_read_se_status"
   efm32s2_dci_connect

   # Write len
   efm32s2_dci_write_cmd 8

   # Write cmd
   efm32s2_dci_write_cmd 0xFE010000

   set recvlen [efm32s2_dci_read_response]

   if {$recvlen & 0xFFFF0000} {
      echo "command response was not OK, got $recvlen as command response. Can't continue."
      return
   }

   set debuglock_idx 3

   if {$recvlen == 0x28} {
      set debuglock_idx 7
   }

   # decrement length word
   set recvlen [expr {$recvlen - 4}]

   for {set i 0} {1} {incr i} {
      if {$recvlen <= 0} {
         break
      }

      set recvlen [expr {$recvlen - 4}]
      set sestatusarray($i) [efm32s2_dci_read_response]
   }

   echo "DCI SESTATUS response:"
   set sestatusarray

   set debuglock $sestatusarray($debuglock_idx)

   if {$debuglock & 0x01} {
      echo "Debug lock (config): Enabled"
   } else {
      echo "Debug lock (config): Disabled"
   }

   if {$debuglock & 0x02} {
      echo "Device erase: Enabled"
   } else {
      echo "Device erase: Disabled"
   }

   if {$debuglock & 0x04} {
      echo "Secure debug: Enabled"
   } else {
      echo "Secure debug: Disabled"
   }

   if {$debuglock & 0x20} {
      echo "Debug lock (hw status): Enabled"
      echo "\n"
      echo " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *"
      echo "  You will not be able to communicate with this device"
      echo "  unless you perform a device erase (if available, indicated above)!"
      echo "  Try efm32s2_dci_device_erase to attempt erase."
      echo " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n"
   } else {
      echo "Debug lock (hw status): Disabled"
   }
}
